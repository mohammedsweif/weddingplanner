// <auto-generated />
using System;
using Final_project.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Final_project.Migrations
{
    [DbContext(typeof(ProjectDbcontext))]
    [Migration("20200605151905_aaaaaaas")]
    partial class aaaaaaas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Final_project.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BioInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("birth_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Final_project.Models.Messages", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date_Send")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_replay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mess_Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Replay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vendor_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("User_id");

                    b.HasIndex("Vendor_id");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("Final_project.Models.OurIdentity.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Article_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Article_Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("user_id");

                    b.ToTable("articles");
                });

            modelBuilder.Entity("Final_project.Models.OurIdentity.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BookDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("RealDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VendorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pack_id")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorId");

                    b.HasIndex("pack_id");

                    b.ToTable("booking");
                });

            modelBuilder.Entity("Final_project.Models.OurIdentity.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Event_id")
                        .HasColumnType("int");

                    b.Property<int>("PackageCost")
                        .HasColumnType("int");

                    b.Property<string>("VendorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("catagory_id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("feature_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("season_id")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("PackageId");

                    b.HasIndex("Event_id");

                    b.HasIndex("VendorId");

                    b.HasIndex("catagory_id");

                    b.HasIndex("season_id");

                    b.ToTable("packages");
                });

            modelBuilder.Entity("Final_project.Models.OurIdentity.Review", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vendor_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("catagory_id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("User_Id");

                    b.HasIndex("Vendor_Id");

                    b.HasIndex("catagory_id");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("Final_project.Models.OurIdentity.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FacebookLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instgram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitterr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("catt_id")
                        .HasColumnType("int");

                    b.Property<string>("vendor_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("catt_id");

                    b.HasIndex("vendor_id");

                    b.ToTable("vendors");
                });

            modelBuilder.Entity("Final_project.Models.OurIdentity.catagory", b =>
                {
                    b.Property<int>("cat_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("cat_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cat_Id");

                    b.ToTable("catagories");
                });

            modelBuilder.Entity("Final_project.Models.Rating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vendor_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("catagorycat_Id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("User_Id");

                    b.HasIndex("Vendor_Id");

                    b.HasIndex("catagorycat_Id");

                    b.ToTable("ratings");
                });

            modelBuilder.Entity("Final_project.Models.UserProduct", b =>
                {
                    b.Property<int>("piece_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("available_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("piece_Cost")
                        .HasColumnType("int");

                    b.Property<string>("piece_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("publish_date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<string>("userseller_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("piece_id");

                    b.HasIndex("userseller_id");

                    b.ToTable("userProducts");
                });

            modelBuilder.Entity("Final_project.Models.VendorWorks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_updated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vendor_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("vendor_id");

                    b.ToTable("vendorWorks");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.Event", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Event_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("events");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.Favorit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("about")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cat_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("vendor_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vendor_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("cat_id");

                    b.HasIndex("user_id");

                    b.HasIndex("vendor_id");

                    b.ToTable("favorits");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.Review_replays", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PostDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Review_Id")
                        .HasColumnType("int");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vendor_Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Review_Id");

                    b.HasIndex("User_Id");

                    b.HasIndex("Vendor_Id");

                    b.ToTable("review_Replays");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.UserSelled", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_used")
                        .HasColumnType("int");

                    b.Property<string>("userbuyer_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userseller_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("userbuyer_id");

                    b.HasIndex("userseller_id");

                    b.ToTable("userSelleds");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.VenBudget", b =>
                {
                    b.Property<string>("vendor_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("catt_id")
                        .HasColumnType("int");

                    b.Property<int>("Cat_budget")
                        .HasColumnType("int");

                    b.HasKey("vendor_id", "catt_id");

                    b.ToTable("venBudgets");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.VendorBusy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BusyDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vendor_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("vendor_id");

                    b.ToTable("vendorBusies");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.product", b =>
                {
                    b.Property<int>("product_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Exp_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Prod_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("old_price")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<string>("product_image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("type_id")
                        .HasColumnType("int");

                    b.HasKey("product_id");

                    b.HasIndex("type_id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.productType", b =>
                {
                    b.Property<int>("type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("type_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("type_id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.season", b =>
                {
                    b.Property<int>("season_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("period")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("season_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("start_time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("season_id");

                    b.ToTable("seasons");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.shop", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("shop_time")
                        .HasColumnType("datetime2");

                    b.Property<bool>("state")
                        .HasColumnType("bit");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("product_id");

                    b.HasIndex("user_id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.signal.Connection", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("connectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("userid")
                        .IsUnique()
                        .HasFilter("[userid] IS NOT NULL");

                    b.ToTable("connections");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.signal.UserGroups", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("groupname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.toDo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vendor_Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("Vendor_Id");

                    b.ToTable("toDo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Final_project.Models.Messages", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "user")
                        .WithMany()
                        .HasForeignKey("User_id");

                    b.HasOne("Final_project.Models.ApplicationUser", "vendor")
                        .WithMany()
                        .HasForeignKey("Vendor_id");
                });

            modelBuilder.Entity("Final_project.Models.OurIdentity.Article", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "applicationUser")
                        .WithMany("articles")
                        .HasForeignKey("user_id");
                });

            modelBuilder.Entity("Final_project.Models.OurIdentity.Booking", b =>
                {
                    b.HasOne("Final_project.Models.OurIdentity.catagory", "category")
                        .WithMany("bookings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final_project.Models.ApplicationUser", "user")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Final_project.Models.ApplicationUser", "vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.HasOne("Final_project.Models.OurIdentity.Package", "Package")
                        .WithMany("Bookings")
                        .HasForeignKey("pack_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Final_project.Models.OurIdentity.Package", b =>
                {
                    b.HasOne("Final_project.Models.our_tables.Event", "Event")
                        .WithMany("packages")
                        .HasForeignKey("Event_id");

                    b.HasOne("Final_project.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.HasOne("Final_project.Models.OurIdentity.catagory", "catagory")
                        .WithMany("packages")
                        .HasForeignKey("catagory_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final_project.Models.our_tables.season", "Season")
                        .WithMany("packages")
                        .HasForeignKey("season_id");
                });

            modelBuilder.Entity("Final_project.Models.OurIdentity.Review", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("User_Id");

                    b.HasOne("Final_project.Models.ApplicationUser", "Vendor")
                        .WithMany()
                        .HasForeignKey("Vendor_Id");

                    b.HasOne("Final_project.Models.OurIdentity.catagory", "catagory")
                        .WithMany("reviews")
                        .HasForeignKey("catagory_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Final_project.Models.OurIdentity.Vendor", b =>
                {
                    b.HasOne("Final_project.Models.OurIdentity.catagory", "category")
                        .WithMany("vendors")
                        .HasForeignKey("catt_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final_project.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("vendors")
                        .HasForeignKey("vendor_id");
                });

            modelBuilder.Entity("Final_project.Models.Rating", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("User_Id");

                    b.HasOne("Final_project.Models.ApplicationUser", "vendor")
                        .WithMany()
                        .HasForeignKey("Vendor_Id");

                    b.HasOne("Final_project.Models.OurIdentity.catagory", null)
                        .WithMany("ratings")
                        .HasForeignKey("catagorycat_Id");
                });

            modelBuilder.Entity("Final_project.Models.UserProduct", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("userUseds")
                        .HasForeignKey("userseller_id");
                });

            modelBuilder.Entity("Final_project.Models.VendorWorks", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "applicationUser")
                        .WithMany("vendorWorks")
                        .HasForeignKey("vendor_id");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.Favorit", b =>
                {
                    b.HasOne("Final_project.Models.OurIdentity.catagory", "catagory")
                        .WithMany()
                        .HasForeignKey("cat_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final_project.Models.ApplicationUser", "user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.HasOne("Final_project.Models.ApplicationUser", "vendor")
                        .WithMany()
                        .HasForeignKey("vendor_id");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.Review_replays", b =>
                {
                    b.HasOne("Final_project.Models.OurIdentity.Review", "review")
                        .WithMany()
                        .HasForeignKey("Review_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final_project.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("User_Id");

                    b.HasOne("Final_project.Models.ApplicationUser", "Vendor")
                        .WithMany()
                        .HasForeignKey("Vendor_Id");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.UserSelled", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "userbuyer")
                        .WithMany()
                        .HasForeignKey("userbuyer_id");

                    b.HasOne("Final_project.Models.ApplicationUser", "useseller")
                        .WithMany()
                        .HasForeignKey("userseller_id");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.VendorBusy", b =>
                {
                    b.HasOne("Final_project.Models.OurIdentity.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("Final_project.Models.ApplicationUser", "applicationUser")
                        .WithMany("vendorBusies")
                        .HasForeignKey("vendor_id");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.product", b =>
                {
                    b.HasOne("Final_project.Models.our_tables.productType", "productType")
                        .WithMany()
                        .HasForeignKey("type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Final_project.Models.our_tables.shop", b =>
                {
                    b.HasOne("Final_project.Models.our_tables.product", "product")
                        .WithMany()
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final_project.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("user_id");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.signal.Connection", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "user")
                        .WithOne("connection")
                        .HasForeignKey("Final_project.Models.our_tables.signal.Connection", "userid");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.signal.UserGroups", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "users")
                        .WithMany("userGroups")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("Final_project.Models.our_tables.toDo", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "Vendors")
                        .WithMany()
                        .HasForeignKey("Vendor_Id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final_project.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
